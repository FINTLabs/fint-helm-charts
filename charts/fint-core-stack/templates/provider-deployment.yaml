apiVersion: apps/v1
kind: Deployment
metadata:
  labels: 
    fint.stack: {{ include "fint-core-stack.name" . }}
    fint.role: provider
    {{- include "fint-environment.labels" . | nindent 4 }}

  name: provider-{{ include "fint-core-stack.name" . }}
spec:
  replicas: 1
  selector:
    matchLabels: {fint.stack: {{ include "fint-core-stack.name" . }}, fint.role: provider}
  strategy:
    type: RollingUpdate
    rollingUpdate: {maxSurge: 1, maxUnavailable: 0}
  template:
    metadata:
      labels: {fint.stack: {{ include "fint-core-stack.name" . }}, fint.role: provider}
    spec:
      containers:
        - envFrom:
          - configMapRef:
              name: fint-environment
          - secretRef:
              name: fint-events-azure-eventhub
          env:
            - {name: JAVA_TOOL_OPTIONS, value: '-XX:+ExitOnOutOfMemoryError -Xmx{{ .Values.provider.deployment.java.xmx }} -verbose:gc'}
            - {name: fint.events.orgIds, value: health.fintlabs.no}
            - {name: fint.hazelcast.kubernetes.enabled, value: 'true'}
            - {name: fint.hazelcast.kubernetes.namespace, value: default}
            - {name: fint.hazelcast.kubernetes.labelName, value: fint.stack}
            - {name: fint.hazelcast.kubernetes.labelValue, value: {{ include "fint-core-stack.name" . }}}
            - {name: server.context-path, value: {{ .Values.provider.deployment.contextPath }}}
            {{- range .Values.provider.deployment.environments }}
            - {name: {{ .name}}, value: {{ .value }}}
            {{- end }} 
          image: "{{ .Values.provider.deployment.image.repository }}:{{ .Values.provider.deployment.image.tag }}"
          imagePullPolicy: "{{ .Values.provider.deployment.image.pullPolicy }}"
          name: provider-{{ .Values.name }}
          ports:
            - {containerPort: 8080}
          readinessProbe:
            httpGet: {path: {{ .Values.provider.deployment.contextPath }}/health, port: 8080}
            initialDelaySeconds: 60
            timeoutSeconds: 5
          resources:
            limits: {memory: 3Gi, cpu: '2'}
            requests: {memory: 2Gi, cpu: 250m}
      restartPolicy: Always